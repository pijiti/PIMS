table.table.table-responsive.table-hover
    thead
      tr.data-rows
         th
         th Generic Drug
         th Brand
         th Store
         th Units(Packs)
         th Rate per unit
         th Batches
         th Last Updated
         th Parent Store
         th Parent store units

    tbody
      - current_pharm_item = 0
      - @inventories.each do |i|
        -if i.pharm_item_id != current_pharm_item
            - current_pharm_item = i.pharm_item_id
            tr(class="data-rows clickable" data-toggle="collapse"  id="row#{current_pharm_item}" data-target=".row#{current_pharm_item}")
                td
                  - if @inventories.where(:brand => i.pharm_item.try(:brands)).count > 1
                      i.fa.fa-plus
                td = i.brand.try(:pharm_item).try(:name)
                td
                    a href="#" class="btn btn-sm #{order_more_btn(i,i.store)}" data-toggle="modal" data-target="#order_#{current_pharm_item}"  Order more
                    div[id="order_#{current_pharm_item}" class="modal" aria-labelledby="myModalLabel" role="dialog" tabindex="-1"]
                      .modal-dialog role="document"
                        .modal-content
                          .modal-header
                            button.close aria-label="Close" data-dismiss="modal" type="button"
                              span aria-hidden="true"  &times;
                            h4#myModalLabel.modal-title Order #{i.pharm_item.try(:name)} for #{i.store.name}
                          .modal-body
                            - if i.store.parent.blank?
                              = simple_form_for(Vendor.new, :url => order_vendors_path , :method => "post")  do |vendor_form|
                                    /= vendor_form.collection_check_boxes :id, vendors_from_inventories(i.pharm_item_id), :id, :name , label: "Vendor"
                                    = vendor_form.input :id ,as: :check_boxes, collection: @vendors , label: "Vendors list"
                                    = vendor_form.hidden_field :pharm_item_id , :value => i.pharm_item_id
                                    = vendor_form.hidden_field :store_id , :value => i.store_id
                                    .actions.text-center
                                      = vendor_form.submit :class => "btn btn-primary btn-sm" , :value => "Order"
                            -else
                              = simple_form_for(Supply.new, :url => order_supplies_path , :method => "post")  do |supply_form|

                                    = supply_form.input :order_qty
                                    = supply_form.input :brand_id , collection: i.pharm_item.try(:brands) , :prompt => "Any"
                                    = supply_form.hidden_field :pharm_item_id , :value => i.pharm_item_id
                                    = supply_form.hidden_field :store_id , :value => i.store_id
                                    = supply_form.hidden_field :parent_store_id , :value => i.store.parent.id

                                    p Click order button to submit request to the parent store #{i.store.parent.name}
                                    .actions.text-center
                                      = supply_form.submit :class => "btn btn-primary btn-sm" , :value => "Order"


                          .modal-footer
                            button.btn.btn-default data-dismiss="modal" type="button"  Close
                td
                  /= i.store.name
                td
                  /= Inventory.where(:pharm_item => current_pharm_item , :store => i.store).sum(:units)
                td
                  /= i.rate_per_unit
                td
                td
                  /= i.updated_at.strftime("%d/%y/%Y at %I:%M%p")
                td
                  /= i.store.parent.try(:name)
                td
                  /= Inventory.where(:store => i.store.parent , :brand =>i.brand ).try(:first).try(:units)

        tr(class ="data-rows collapse in row#{current_pharm_item}" )
           td
           td
           td
             = i.brand.try(:mini_info)

           td = i.store.name
           td
             - batch_units = i.inventory_batches.try(:sum, :units)
             = "#{batch_units}(#{batch_units.to_i / i.brand.try(:pack_size).try(:to_i)})"  if i.brand.try(:pack_size)
           td = ("%.2f" % i.rate_per_unit) if i.rate_per_unit
           td
                          a href="#" data-toggle="modal" data-target="#batches_#{i.id}"  View
                          /! Modal
                          div[id="batches_#{i.id}"  class="modal" aria-labelledby="myModalLabel" role="dialog" tabindex="-1"]
                            .modal-dialog role="document"
                              .modal-content
                                .modal-header
                                  button.close aria-label="Close" data-dismiss="modal" type="button"
                                    span aria-hidden="true"  &times;
                                  h4#myModalLabel.modal-title Inventory #{i.brand.try(:name)}

                                .modal-body
                                  table.table.table-striped.table-condensed.batches.data_table
                                                  thead
                                                     tr
                                                       th Brand
                                                       th Vendor
                                                       th Batch No
                                                       th Rate
                                                       th Units(Packs)
                                                       th Rate per unit
                                                       th Mfd Date
                                                       th Expiry Date

                                                  tbody
                                                    -i.batches.try(:each) do |batch|
                                                     - next if i.inventory_batches.where(:batch =>batch , :expired => nil).sum(:units) == 0
                                                     tr[class="#{highlight_batch(batch)}" ]
                                                         td = batch.brand.detailed_info
                                                         td = batch.try(:supply).try(:vendor).try(:name)
                                                         td = batch.batch_number
                                                         td = batch.rate
                                                         td = "#{i.inventory_batches.where(:batch =>batch).sum(:units)}(#{i.inventory_batches.where(:batch =>batch).sum(:units)/i.brand.pack_size.to_i})"
                                                         td
                                                            - ratep = batch.rate / batch.brand.pack_size.to_f
                                                            = "%.2f" % ratep
                                                         td = batch.mfd_date.strftime("%d/%m/%Y")
                                                         td = batch.expiry_date.strftime("%d/%m/%Y")
                                .modal-footer
                                  button.btn.btn-default data-dismiss="modal" type="button"  Close
           td = i.updated_at.strftime("%d/%m/%Y at %I:%M%p")
           td = i.store.parent.try(:name)
           td
             = Inventory.where(:store => i.store.parent , :brand =>i.brand ).try(:first).try(:inventory_batches).try(:sum, :units)